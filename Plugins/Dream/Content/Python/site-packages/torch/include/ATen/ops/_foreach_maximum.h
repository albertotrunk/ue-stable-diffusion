#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/_foreach_maximum_ops.h>

namespace at {


// aten::_foreach_maximum.List(Tensor[] self, Tensor[] other) -> Tensor[]
inline ::std::vector<at::Tensor> _foreach_maximum(at::TensorList self, at::TensorList other) {
    return at::_ops::_foreach_maximum_List::call(self, other);
}

// aten::_foreach_maximum_.List(Tensor(a!)[] self, Tensor[] other) -> ()
inline void _foreach_maximum_(at::TensorList self, at::TensorList other) {
    return at::_ops::_foreach_maximum__List::call(self, other);
}

// aten::_foreach_maximum.List_out(Tensor[] self, Tensor[] other, *, Tensor(a!)[] out) -> ()
inline void _foreach_maximum_out(at::TensorList out, at::TensorList self, at::TensorList other) {
    return at::_ops::_foreach_maximum_List_out::call(self, other, out);
}
// aten::_foreach_maximum.List_out(Tensor[] self, Tensor[] other, *, Tensor(a!)[] out) -> ()
inline void _foreach_maximum_outf(at::TensorList self, at::TensorList other, at::TensorList out) {
    return at::_ops::_foreach_maximum_List_out::call(self, other, out);
}

}
