#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/_nnpack_spatial_convolution_ops.h>

namespace at {


// aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor
inline at::Tensor _nnpack_spatial_convolution(const at::Tensor & input, const at::Tensor & weight, const c10::optional<at::Tensor> & bias, at::IntArrayRef padding, at::IntArrayRef stride=1) {
    return at::_ops::_nnpack_spatial_convolution::call(input, weight, bias, padding, stride);
}

// aten::_nnpack_spatial_convolution.out(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1, *, Tensor(a!) out) -> Tensor(a!)
inline at::Tensor & _nnpack_spatial_convolution_out(at::Tensor & out, const at::Tensor & input, const at::Tensor & weight, const c10::optional<at::Tensor> & bias, at::IntArrayRef padding, at::IntArrayRef stride=1) {
    return at::_ops::_nnpack_spatial_convolution_out::call(input, weight, bias, padding, stride, out);
}
// aten::_nnpack_spatial_convolution.out(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1, *, Tensor(a!) out) -> Tensor(a!)
inline at::Tensor & _nnpack_spatial_convolution_outf(const at::Tensor & input, const at::Tensor & weight, const c10::optional<at::Tensor> & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out) {
    return at::_ops::_nnpack_spatial_convolution_out::call(input, weight, bias, padding, stride, out);
}

}
